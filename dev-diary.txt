https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/

"There is good support for functional programming with first-class functions, anonymous functions, and closures."
    :)

"You never directly access attributes. With Ruby, it‚Äôs all method calls."
"Parentheses for method calls are usually optional."
    :(

"There‚Äôs public, private, and protected to enforce access, instead of Python‚Äôs _voluntary_ underscore __convention__."
    i like that

"When tested for truth, only false and nil evaluate to a false value. Everything else is true (including 0, 0.0, "", and [])."

dict syntax
    { "one" => "eins", "two" => "zwei", "three" => "drei" }
    "hashes" not dicts

These ratings are not strings. When you place a colon in front of a simple word,
you get a symbol. Symbols are cheaper than strings (in terms of computer
memory.) If you use a word over and over in your program, use a symbol. Rather
than having thousands of copies of that word in memory, the computer will store
the symbol only once.
    :foo

working through https://try.ruby-lang.org/

.each can be called on numbers, arrays, hashes, takes a block
.select lets you filter, also takes a block

    def print_plays(year_from, year_to)
    get_shakey["William Shakespeare"]
        .select { |k, v|
        year_from <= v["finished"] &&
        year_to   >= v["finished"]
        }.each { |k, v|
        puts "#{v["title"].ljust(30)} #{v["finished"]}"
        }
    end
    print_plays(1600, 1605)

    First replace Jimmy with #{}. If Ruby sees a hash symbol # followed by a curly
    brace { it looks for a variable between the first brace and the following
    closing brace }. So we can use this: ‚ÄúHi, my name is #{name}‚Äù.

    class Blurb
    attr_accessor :content, :time, :mood

    def initialize(mood, content="")
        @time    = Time.now
        @content = content[0..39]
        @mood    = mood
    end
    end

    Blurb.new(:sick).time

so @ is basically self

    class Blurbalizer
    def initialize(title)
        @title  = title
        @blurbs = [] # A fresh clean array
                    # for storing Blurbs
    end

    def add_a_blurb(mood, content)
        # The << means add to the end of the array
        @blurbs << Blurb.new(mood, content)
    end

    def show_timeline
        puts "Blurbify: #{@title} has #{@blurbs.count} Blurbs"

        @blurbs.sort_by { |t|
        t.time
        }.reverse.each { |t|
        puts "#{t.content.ljust(40)} #{t.time}"
        }
    end
    end

    myapp = Blurbalizer.new "The Big Blurb"

so you append to a list by doing list << new_item

ok done w tryruby
let's do an aoc problem
starting 2021

ok cool day 1 part 1 ez

now let's figure out how to set up type annotations
https://betterprogramming.pub/why-i-stopped-using-sorbet-in-all-my-ruby-projects-9366bf6dd116
"code becomes bloated" lol go fuck yourself

second argument is they spent a lot of time typing all of their dependencies - just dont do that, its ok

most compelling argument is that ruby 3 had the chance to handle type annotations better but matz doesnt like type annotations
boo to matz. boo to ruby.

https://zverok.space/blog/2023-05-05-ruby-types.html
    Matz commented on the issue, saying that he acknowledges the demand but
    personally never liked the idea, basically considering annotations
    redundant, ‚Äúnot DRY.‚Äù

    BOOOOOOO
    BOOOOOOOOOOOOOO

https://sorbet.org/blog/2020/07/30/ruby-3-rbs-sorbet

getting vscode to play nice w ruby/rbenv has been a nightmare so far

maybe i'll just use asdf

ok gonna start part 2 while installing asdf

part 2 done

ok i have asdf set up

DONE get sorbet vscode extension working

ok i updated my os (i was two major os versions behind!) and messed around w various things
one of my main issues was that i was doing extend T::sig instead of extend T::Sig, whoops

so now we pass sorbet and things are looking good
i'm reading through more sorbet docs
T.must asserts something nilable is not nil

some notes on runtime check perf tricks in https://sorbet.org/docs/type-assertions

https://sorbet.org/docs/troubleshooting

https://sorbet.org/docs/faq
    long, i'll read this later

so for day 1 part 2 i have this


  sig { returns(Integer) }
  def part_two
    depths = load_input

    last_window_sum = T.must(depths[0..2]).sum
    result = 0
    depths.each_cons(3).each do |window|
      result += 1 if window.sum > last_window_sum

      last_window_sum = window.sum
    end

    result

i was hoping to see if i could use some neato zip-style approach instead of a .each forloop
let's see

ok i think this should work

  sig { returns(Integer) }
  def part_two
    depths = load_input

    windows = depths.each_cons(3).map(&:sum)

    windows.zip(T.must(windows[1..])).select do |window_one, window_two|
      !window_two.nil? && window_two > window_one
    end.count
  end

but now i'm having trouble running the program

    [jrheard@erebus:advent_2021] ÓÇ† main
    üöÇ  ruby day_1.rb
    day_1.rb:5:in `<class:Main>': uninitialized constant Main::T (NameError)

    extend T::Sig
            ^^^^^
            from day_1.rb:4:in `<main>'

    [jrheard@erebus:advent_2021] ÓÇ† main [!]
    üöÇ  bundle exec ruby day_1.rb
    day_1.rb:5:in `<class:Main>': uninitialized constant Main::T (NameError)

    extend T::Sig
            ^^^^^
            from day_1.rb:4:in `<main>'

something i've done since sitting down today must have caused an issue
or i'm not invoking the program correctly
let's figure it out

i suspect it's because of group development
    gem 'sorbet', group: :development

how can i run the program in a development group context?
no, that doesn't seem to be it

ok it looks like the issue is that i had removed this
    require 'sorbet-runtime'

so i guess that really is necessary, cool cool

also it's been bugging me that i have to wrap my code in a Main module/class to get sorbet to work
let's read https://github.com/sorbet/sorbet/pull/3491

ok cool doesn't seem necessary, ezpz
had to quiet a rubocop lint complaining about mixin usage at top level but thats ok

ok i think i'm happy with day 1 now! :)

also, TODO figure out what &:sum means here
    windows = depths.each_cons(3).map(&:sum)

it told me to do that instead of doing a block like |x| x.sum

    https://stackoverflow.com/questions/1961030/ruby-ampersand-colon-shortcut

    Your question is wrong, so to speak. What's happening here isn't "ampersand and
    colon", it's "ampersand and object". The colon in this case is for the symbol.
    So, there's & and there's :foo.

    The & calls to_proc on the object, and passes it as a block to the method. In
    Ruby, to_proc is implemented on Symbol, so that these two calls are equivalent:

    something {|i| i.foo } something(&:foo) So, to sum up: & calls to_proc on the
    object and passes it as a block to the method, and Ruby implements to_proc on
    Symbol.

ok cool neat

https://stackoverflow.com/questions/14881125/what-does-to-proc-method-mean-in-ruby

ok cool whatever

oh my god everything in all ruby files in the project ends up in the same namespace
so def load_input() in one .rb file collides with def load_input() in another .rb file even without importing the other file
lol that's stupid

lol ruby's all "DRY is important" but you have to boilerplate each file into a module
and also a two-line python dataclass ends up looking like this

  class Instruction
    extend T::Sig

    sig { returns(Symbol) }
    attr_reader :direction

    sig { returns(Integer) }
    attr_reader :magnitude

    sig { params(direction: Symbol, magnitude: Integer).void }
    def initialize(direction, magnitude)
      @direction = direction
      @magnitude = magnitude
    end
  end

lol.
:( :( :( :( :(

ok anyway day 2 part 1 done
taking a sec to read another tab

https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/

suggests running `ri Enumerable`
neat, shows lots of handy methods
eg
    * #include?, #member?: Returns true if self == object, false otherwise.
    * #all?: Returns true if all elements meet a specified criterion; false
    otherwise.
    * #any?: Returns true if any element meets a specified criterion; false
    otherwise.
    * #none?: Returns true if no element meets a specified criterion; false
    otherwise.
    * #one?: Returns true if exactly one element meets a specified
    criterion; false otherwise.
    * #count: Returns the count of elements, based on an argument or block
    criterion, if given.
    * #tally: Returns a new Hash containing the counts of occurrences of
    each element.

oh neat, count takes a block! handy

i like enumerable!

    If you‚Äôre in doubt whether to use a Symbol or a String, consider what‚Äôs more
    important: the identity of an object (i.e. a Hash key), or the contents (in the
    example above, ‚Äúgeorge‚Äù).

ok cool fine done w that page
part 2 now

part 2 done

https://medium.com/@baweaver/functional-programming-in-ruby-state-5e55d40b4e67
is fine but nothing interesting in there for me, pretty basic

day 3 part 1 done

https://www.rubyguides.com/2018/01/functional-programming-ruby/

also extremely surface level

found this https://sorbet.org/docs/tstruct - is this like dataclasses?
could it fix the stuff i was complaining about around line 240?

yes dude awesome

  class Instruction < T::Struct
    const :direction, Symbol
    const :magnitude, Integer
  end

sick :)

reading the rest of https://sorbet.org/docs/tstruct

    "Sorbet does not allow inheriting from a class which inherits from T::Struct."

    <3
    lol they say it's for perf but whatever, works for me

https://sorbet.org/docs/tstruct#legacy-code-and-historical-context
    * don't try to serialize/deserialize them
    * they do reference equality instead of value equality (boo!!!)
        this is a BIG wart :(
    * .with() is like .replace() except it does a seralize/deserialize so you can't use it

fine
day 3 part 2 now
done

https://www.rubypigeon.com/posts/avoid-mutation-functional-style-in-ruby/
    not super well written
    actually it does get a bit better toward the end, just a weak beginning
    doesn't talk about side effects, just talks about avoiding LOCAL mutation, which doesn't matter as much as avoiding side effects

    "In practise, however, performance is rarely an issue. Typically you‚Äôre only
    working with small data sets, like an array of 100 immutable objects. "

    i definitely agree w that ^

https://patshaughnessy.net/2013/4/3/ruby-2-0-works-hard-so-you-can-be-lazy
    looks like laziness is opt-in in ruby, you have to do .lazy in your iterator chair explicitly
    neat article but too long, i'll reread this sometime in the distant future if i do end up having to be a rubyist

day 4 part 1 done
that was pretty educational, lot of unfamiliar syntax
ruby is taking some practice but we're getting there
the enumerable api is taking a bit of getting used to
and the sorbet syntax is pretty unwieldy but beats nothing

part 2 ez

sorbet maintainer blog https://blog.jez.io/#all-posts

https://sorbet.org/docs/tenum
    neat

https://sorbet.org/docs/faq
    TODO keep reading this
    T.cast will be useful i'm sure

    lotta stuff in here

    union types T.any() https://sorbet.org/docs/union-types
    use .fetch(i) instead of T.must(array[i]), neat

day 5 part 1 done
looks like shit tho

    num_vents_by_position = T.let(Hash.new { 0 }, T::Hash[[Integer, Integer], Integer])

    load_input.each do |vent|
      # "For now, only consider horizontal and vertical lines: lines where either x1 = x2 or y1 = y2."
      if vent.start_x == vent.end_x
        ([vent.start_y, vent.end_y].min..[vent.start_y, vent.end_y].max).each do |y|
          num_vents_by_position[[vent.start_x, y]] = T.must(num_vents_by_position[[vent.start_x, y]]) + 1
        end
      end
      next unless vent.start_y == vent.end_y

      ([vent.start_x, vent.end_x].min..[vent.start_x, vent.end_x].max).each do |x|
        num_vents_by_position[[x, vent.start_y]] = T.must(num_vents_by_position[[x, vent.start_y]]) + 1
      end
    end

that is so gross
i think it'd be better if:
    * i do a .select pass over vents to filter out diagonal ones, and
    * i have the OceanVent class expose some kind of .range method

ok done, i made it better :)

    load_input.select do |vent|
      # "For now, only consider horizontal and vertical lines: lines where either x1 = x2 or y1 = y2."
      vent.start_x == vent.end_x || vent.start_y == vent.end_y
    end.each do |vent|
      vent.range.each do |x, y|
        num_vents_by_position[[x, y]] = T.must(num_vents_by_position[[x, y]]) + 1
      end
    end

not a fan of having to do a T.must() in there instead of doing +=, doesn't seem like sorbet knows about hashes with defaults
oh well

ok, did a day of 2020 in python to prep for an interview, back to ruby 2021